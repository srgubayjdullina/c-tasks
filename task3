#include <iostream>
#include <vector>

class KQueens {
public:
KQueens(int n) : board_size(n), solutions(0) {
        queens.resize(n, -1);
    }

void solve() {
        solveRecursive(0);
    }

void printSolutions() {
        std::cout << "Number of solutions for " << board_size << "-queens problem: " << solutions << "\n";
    }

private
void solveRecursive(int row) {
    if (row == board_size) {
        solutions++;
        printSolution();
        return;
        }

for (int column = 0; column < board_size; col++) {
    if (isSafe(row, column)) {
        queens[row] = column;
        solveRecursive(row + 1);
        queens[row] = -1;  // Backtrack
            }
        }
    }
bool isSafe(int row, int column) const {
  for (int prev_row = 0; prev_row < row; prev_row++) {
    int prev_column = queens[prev_row];
      if (prev_column == col ||            // Проверка вертикали
        prev_column - prev_row == column - row ||  // Диагональ "/"
        prev_column + prev_row == column + row) {  // Диагональ "\"
        return false;
            }
        }
        return true;
    }

 void printSolution() const {
        std::cout << "Solution " << solutions << ":\n";
        for (int row = 0; row < board_size; row++) {
            for (int column = 0; col < board_size; column++) {
                std::cout << (queens[row] == column ? 'Q' : '.');
            }
            std::cout << "\n";
        }
        std::cout << "\n";
    }

    int board_size;
    int solutions;
    std::vector<int> queens;
};

int main() {
    int n;
    std::cout << "Enter the size of the chessboard (n): ";
    std::cin >> n;

    KQueens kqueens(n);
    kqueens.solve();
    kqueens.printSolutions();

    return 0;
}
