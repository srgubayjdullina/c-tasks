#include <iostream>
#include <vector>
#include <stack>

class Solution {
public:
    int maximalRectangle(std::vector<std::vector<char>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) {
            return 0;
        }

        int rows = matrix.size();
        int cols = matrix[0].size();
        std::vector<int> heights(cols, 0);
        int maxArea = 0;

        for (int row = 0; row < rows; ++row) {
            for (int col = 0; col < cols; ++col) {
                if (matrix[row][col] == '1') {
                    heights[col]++;
                } else {
                    heights[col] = 0;
                }
            }

            // Площадь максимального прямоугольника в строке
            maxArea = std::max(maxArea, largestRectangleArea(heights));
        }

        return maxArea;
    }

private:
    int largestRectangleArea(const std::vector<int>& heights) {
        int n = heights.size();
        std::stack<int> s;
        int maxArea = 0;

        for (int i = 0; i <= n; ++i) {
            while (!s.empty() && (i == n || heights[i] < heights[s.top()])) {
                int h = heights[s.top()];
                s.pop();
                int w = s.empty() ? i : i - s.top() - 1;
                maxArea = std::max(maxArea, h * w);
            }

            s.push(i);
        }

        return maxArea;
    }
};

int main() {
    // Пример использования
    std::vector<std::vector<char>> matrix = {
        {'1','0','1','0','0'},
        {'1','0','1','1','1'},
        {'1','1','1','1','1'},
        {'1','0','0','1','0'}
    };

    Solution solution;
    int result = solution.maximalRectangle(matrix);

    std::cout << "Максимальная площадь прямоугольника: " << result << std::endl;

    return 0;
}
